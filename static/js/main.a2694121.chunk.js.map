{"version":3,"sources":["pages/Map/geoFunctions.ts","components/Map/index.tsx","pages/Map/index.tsx","routes.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["allotments","quatrains","map","quatrain","flat","WrappedMap","withScriptjs","withGoogleMap","center","children","defaultZoom","props","googleMapURL","loadingElement","style","height","mapElement","containerElement","Map","useState","lat","lng","currentPosition","setCurrentPosition","currentAllotment","setCurrentAllotment","currentQuatrain","setCurrentQuatrain","handleWatchPositionSuccess","useCallback","position","gepoint","geopoint","coords","latitude","longitude","isPointInPolygon","condominiumPolygon","allotment","findNearest","find","includes","getQuatrainByAllotment","handleWatchPositionError","error","console","warn","code","message","useEffect","watchPositionOptions","enableHighAccuracy","timeout","Infinity","maximumAge","whatchId","navigator","geolocation","watchPosition","clearWatch","className","name","Routes","component","path","baseUrl","exact","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a2694121.chunk.js","sourcesContent":["import { findNearest, isPointInPolygon } from 'geolib';\nimport quatrains from '../../database/quatrain_allotments.json';\nimport condominiumPolygon from '../../database/condominium_polygon.json';\nimport { Allotment, Quatrain } from './types';\nimport { GeolibInputCoordinates } from 'geolib/es/types';\n\nconst allotments = quatrains.map((quatrain) => quatrain.allotments).flat();\n\nexport const getNearestAllotment = (\n  gepoint: GeolibInputCoordinates\n): Allotment => findNearest(gepoint, allotments) as Allotment;\n\nexport const getQuatrainByAllotment = (\n  allotment: Allotment\n): Quatrain | undefined =>\n  quatrains.find((quatrain) => {\n    return quatrain.allotments.includes(allotment);\n  });\n\nexport const isPointInsideCondominium = (\n  geopoint: GeolibInputCoordinates\n): boolean => isPointInPolygon(geopoint, condominiumPolygon);\n","import React, { ReactNode } from 'react';\nimport { GoogleMap, withScriptjs, withGoogleMap } from 'react-google-maps';\n\ninterface Props {\n  center: google.maps.LatLngLiteral;\n  children?: ReactNode;\n}\n\nconst Map: React.FC<Props> = ({ center, children }) => {\n  return (\n    <GoogleMap center={center} defaultZoom={4}>\n      {children}\n    </GoogleMap>\n  );\n};\n\nconst WrappedMap = withScriptjs(withGoogleMap(Map));\n\nexport default (props: Props) => (\n  <WrappedMap\n    googleMapURL=\"https://maps.googleapis.com/maps/api/js?v=3&key=AIzaSyDD1Jrs3XLl3-E7c1Wx4IcplDyTF3PPFgM\"\n    loadingElement={<div style={{ height: '100%' }} />}\n    mapElement={<div style={{ height: '100%' }} />}\n    containerElement={<div style={{ height: '100%' }} />}\n    center={props.center}\n    children={props.children}\n  />\n);\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { Marker } from 'react-google-maps';\n\nimport './styles.css';\nimport { Allotment, Quatrain } from './types';\nimport {\n  getNearestAllotment,\n  getQuatrainByAllotment,\n  isPointInsideCondominium,\n} from './geoFunctions';\nimport MapComponent from '../../components/Map';\n\nconst Map: React.FC = () => {\n  const [currentPosition, setCurrentPosition] = useState<\n    google.maps.LatLngLiteral\n  >({\n    lat: 0,\n    lng: 0,\n  });\n  const [currentAllotment, setCurrentAllotment] = useState<Allotment>(\n    {} as Allotment\n  );\n  const [currentQuatrain, setCurrentQuatrain] = useState<Quatrain | undefined>(\n    {} as Quatrain\n  );\n\n  const handleWatchPositionSuccess: PositionCallback = useCallback(\n    (position) => {\n      const { latitude, longitude } = position.coords;\n\n      if (isPointInsideCondominium({ latitude, longitude })) {\n        setCurrentPosition({ lat: latitude, lng: longitude });\n\n        const allotment = getNearestAllotment({ latitude, longitude });\n        const quatrain = getQuatrainByAllotment(allotment);\n\n        setCurrentQuatrain(quatrain);\n        setCurrentAllotment(allotment);\n      }\n    },\n    []\n  );\n\n  const handleWatchPositionError: PositionErrorCallback = useCallback(\n    (error) => {\n      console.warn('ERRO(' + error.code + '): ' + error.message);\n    },\n    []\n  );\n\n  useEffect(() => {\n    const watchPositionOptions = {\n      enableHighAccuracy: true,\n      timeout: Infinity,\n      maximumAge: 0,\n    };\n\n    const whatchId = navigator.geolocation.watchPosition(\n      handleWatchPositionSuccess,\n      handleWatchPositionError,\n      watchPositionOptions\n    );\n\n    return function clearWhatchPosition() {\n      navigator.geolocation.clearWatch(whatchId);\n    };\n  }, [handleWatchPositionError, handleWatchPositionSuccess]);\n\n  return (\n    <div className=\"map\">\n      <div className=\"mapFooter\">\n        <div className=\"currentPositionInfo\">{`Você está: ${currentQuatrain?.name} / ${currentAllotment.name}`}</div>\n      </div>\n\n      <MapComponent center={currentPosition}>\n        <Marker position={currentPosition} />\n      </MapComponent>\n    </div>\n  );\n};\n\nexport default Map;\n","import React from 'react';\nimport { Route, BrowserRouter } from 'react-router-dom';\n\nimport Map from './pages/Map';\n\nconst Routes = () => {\n  const baseUrl = process.env.PUBLIC_URL;\n\n  return (\n    <BrowserRouter>\n      <Route component={Map} path={baseUrl + '/'} exact />\n    </BrowserRouter>\n  );\n};\n\nexport default Routes;\n","import React from 'react';\nimport './App.css';\nimport Routes from './routes';\n\nfunction App() {\n  return <Routes />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}